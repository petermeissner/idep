group_by(ctr)  %>%
summarise(id=last(so_id), last(so_end)) %>%
`[[`("id")
isor[isor$so_id %in% last_so, "so_end"] <-
apply( cbind( isor[isor$so_id %in% last_so, "so_start"], as.Date("2010-01-01")), 1, max)
# isor so_length
isor <-
isor  %>%
mutate(
so_length = so_end - so_start
)
# erd
load("../external_data/erd_cleaned_up.Rdata")
erd[,1:11]
erd <-
erd %>%
mutate(
erd_cab_id = cab_id
)
# pg / mp
load("../external_data/cmp_parlgov_cabinets_ideo_confl_volatility.Rdata")
cabinets[,1:10]
# majority requirement
load("../external_data/maj_req.Rdata")
# veto points
load("../external_data/veto_pts.Rdata")
#### creating isos data set ====================================================
### getting all spans
#   (by expanding time spans to single days,
#    match both data sources on them,
#    aggregate if possible
#   )
isos <- NULL
countries <- sort(unique(c(erd$ctr, isor$ctr)))
i <- 3
countries
ctri <- countries[i]
df1 <-
isor  %>%
filter(ctr==ctri) %>%
select(so_id, so_start, so_end) %>%
as.data.frame()
df2 <-
erd  %>%
filter(ctr==ctri) %>%
select(cab_id, cab_in, cab_out) %>%
as.data.frame()
isos_tmp         <- merger_for_time_spans(df1, df2) %>% arrange(span_start, so_id, cab_id)
isos_tmp$ctr     <- ctri
isos_tmp$span_id <- isos_tmp$span_id + which(sort(unique(c(erd$ctr, isor$ctr))) %in% ctri) * 10000
isos             <- rbind(isos, isos_tmp )
isos <- NULL
countries <- sort(unique(c(erd$ctr, isor$ctr)))
for (i in seq_along(countries) ) {
ctri <- countries[i]
df1 <-
isor  %>%
filter(ctr==ctri) %>%
select(so_id, so_start, so_end) %>%
as.data.frame()
df2 <-
erd  %>%
filter(ctr==ctri) %>%
select(cab_id, cab_in, cab_out) %>%
as.data.frame()
isos_tmp         <- merger_for_time_spans(df1, df2) %>% arrange(span_start, so_id, cab_id)
isos_tmp$ctr     <- ctri
isos_tmp$span_id <- isos_tmp$span_id + which(sort(unique(c(erd$ctr, isor$ctr))) %in% ctri) * 10000
isos             <- rbind(isos, isos_tmp )
}
options("warn"=2)
# script for making a span data set
# with all variables in isom
# script for joining / merging erd, isor, parlgov,
#### setting things up =========================================================
setwd("z:/gesch\u00e4ftsordnungen/database/aggregats/")
library(idep)
library(dplyr)
library(foreign)
#### loading data ==============================================================
# isor
load("isor.Rdata")
isor[,1:8]
isor  <-
isor  %>%
rename(
so_id      = t_id,
so_start   = t_date,
so_end     = t_date_lead,
so_dplus   = t_dplus,
so_daccept = t_daccept,
so_dpromul = t_dpromul,
so_denact  = t_denact
)
# end dates for last observations -> max of end-of-study or start-of-so
last_so <-
isor %>%
arrange(so_id)  %>%
group_by(ctr)  %>%
summarise(id=last(so_id), last(so_end)) %>%
`[[`("id")
isor[isor$so_id %in% last_so, "so_end"] <-
apply( cbind( isor[isor$so_id %in% last_so, "so_start"], as.Date("2010-01-01")), 1, max)
# isor so_length
isor <-
isor  %>%
mutate(
so_length = so_end - so_start
)
# erd
load("../external_data/erd_cleaned_up.Rdata")
erd[,1:11]
erd <-
erd %>%
mutate(
erd_cab_id = cab_id
)
# pg / mp
load("../external_data/cmp_parlgov_cabinets_ideo_confl_volatility.Rdata")
cabinets[,1:10]
# majority requirement
load("../external_data/maj_req.Rdata")
# veto points
load("../external_data/veto_pts.Rdata")
#### creating isos data set ====================================================
### getting all spans
#   (by expanding time spans to single days,
#    match both data sources on them,
#    aggregate if possible
#   )
isos <- NULL
countries <- sort(unique(c(erd$ctr, isor$ctr)))
for (i in seq_along(countries) ) {
ctri <- countries[i]
df1 <-
isor  %>%
filter(ctr==ctri) %>%
select(so_id, so_start, so_end) %>%
as.data.frame()
df2 <-
erd  %>%
filter(ctr==ctri) %>%
select(cab_id, cab_in, cab_out) %>%
as.data.frame()
isos_tmp         <- merger_for_time_spans(df1, df2) %>% arrange(span_start, so_id, cab_id)
isos_tmp$ctr     <- ctri
isos_tmp$span_id <- isos_tmp$span_id + which(sort(unique(c(erd$ctr, isor$ctr))) %in% ctri) * 10000
isos             <- rbind(isos, isos_tmp )
}
library(hellno)
# script for making a span data set
# with all variables in isom
# script for joining / merging erd, isor, parlgov,
#### setting things up =========================================================
setwd("z:/gesch\u00e4ftsordnungen/database/aggregats/")
library(idep)
library(dplyr)
library(foreign)
#### loading data ==============================================================
# isor
load("isor.Rdata")
isor[,1:8]
isor  <-
isor  %>%
rename(
so_id      = t_id,
so_start   = t_date,
so_end     = t_date_lead,
so_dplus   = t_dplus,
so_daccept = t_daccept,
so_dpromul = t_dpromul,
so_denact  = t_denact
)
# end dates for last observations -> max of end-of-study or start-of-so
last_so <-
isor %>%
arrange(so_id)  %>%
group_by(ctr)  %>%
summarise(id=last(so_id), last(so_end)) %>%
`[[`("id")
isor[isor$so_id %in% last_so, "so_end"] <-
apply( cbind( isor[isor$so_id %in% last_so, "so_start"], as.Date("2010-01-01")), 1, max)
# isor so_length
isor <-
isor  %>%
mutate(
so_length = so_end - so_start
)
# erd
load("../external_data/erd_cleaned_up.Rdata")
erd[,1:11]
erd <-
erd %>%
mutate(
erd_cab_id = cab_id
)
# pg / mp
load("../external_data/cmp_parlgov_cabinets_ideo_confl_volatility.Rdata")
cabinets[,1:10]
# majority requirement
load("../external_data/maj_req.Rdata")
# veto points
load("../external_data/veto_pts.Rdata")
#### creating isos data set ====================================================
### getting all spans
#   (by expanding time spans to single days,
#    match both data sources on them,
#    aggregate if possible
#   )
isos <- NULL
countries <- sort(unique(c(erd$ctr, isor$ctr)))
for (i in seq_along(countries) ) {
ctri <- countries[i]
df1 <-
isor  %>%
filter(ctr==ctri) %>%
select(so_id, so_start, so_end) %>%
as.data.frame()
df2 <-
erd  %>%
filter(ctr==ctri) %>%
select(cab_id, cab_in, cab_out) %>%
as.data.frame()
isos_tmp         <- merger_for_time_spans(df1, df2) %>% arrange(span_start, so_id, cab_id)
isos_tmp$ctr     <- ctri
isos_tmp$span_id <- isos_tmp$span_id + which(sort(unique(c(erd$ctr, isor$ctr))) %in% ctri) * 10000
isos             <- rbind(isos, isos_tmp )
}
ctri <- countries[i]
df1 <-
isor  %>%
filter(ctr==ctri) %>%
select(so_id, so_start, so_end) %>%
as.data.frame()
df2 <-
erd  %>%
filter(ctr==ctri) %>%
select(cab_id, cab_in, cab_out) %>%
as.data.frame()
isos_tmp         <- merger_for_time_spans(df1, df2) %>% arrange(span_start, so_id, cab_id)
isos_tmp$ctr     <- ctri
isos_tmp$span_id <- isos_tmp$span_id + which(sort(unique(c(erd$ctr, isor$ctr))) %in% ctri) * 10000
isos             <- rbind(isos, isos_tmp )
rbind
hellno::rbind
classes(isos)
isos <- data_frame()
countries <- sort(unique(c(erd$ctr, isor$ctr)))
for (i in seq_along(countries) ) {
ctri <- countries[i]
df1 <-
isor  %>%
filter(ctr==ctri) %>%
select(so_id, so_start, so_end) %>%
as.data.frame()
df2 <-
erd  %>%
filter(ctr==ctri) %>%
select(cab_id, cab_in, cab_out) %>%
as.data.frame()
isos_tmp         <- merger_for_time_spans(df1, df2) %>% arrange(span_start, so_id, cab_id)
isos_tmp$ctr     <- ctri
isos_tmp$span_id <- isos_tmp$span_id + which(sort(unique(c(erd$ctr, isor$ctr))) %in% ctri) * 10000
isos             <- rbind(isos, isos_tmp )
}
isos_tmp
classes(isos_tmp)
df1
df2
merger_for_time_spans(df1, df2)
df1
classes(df1)
classes(df2)
library(idep)
# script for making a span data set
# with all variables in isom
# script for joining / merging erd, isor, parlgov,
#### setting things up =========================================================
setwd("z:/gesch\u00e4ftsordnungen/database/aggregats/")
library(idep)
library(dplyr)
library(foreign)
#### loading data ==============================================================
# isor
load("isor.Rdata")
isor[,1:8]
isor  <-
isor  %>%
rename(
so_id      = t_id,
so_start   = t_date,
so_end     = t_date_lead,
so_dplus   = t_dplus,
so_daccept = t_daccept,
so_dpromul = t_dpromul,
so_denact  = t_denact
)
# end dates for last observations -> max of end-of-study or start-of-so
last_so <-
isor %>%
arrange(so_id)  %>%
group_by(ctr)  %>%
summarise(id=last(so_id), last(so_end)) %>%
`[[`("id")
isor[isor$so_id %in% last_so, "so_end"] <-
apply( cbind( isor[isor$so_id %in% last_so, "so_start"], as.Date("2010-01-01")), 1, max)
# isor so_length
isor <-
isor  %>%
mutate(
so_length = so_end - so_start
)
# erd
load("../external_data/erd_cleaned_up.Rdata")
erd[,1:11]
erd <-
erd %>%
mutate(
erd_cab_id = cab_id
)
# pg / mp
load("../external_data/cmp_parlgov_cabinets_ideo_confl_volatility.Rdata")
cabinets[,1:10]
# majority requirement
load("../external_data/maj_req.Rdata")
# veto points
load("../external_data/veto_pts.Rdata")
#### creating isos data set ====================================================
### getting all spans
#   (by expanding time spans to single days,
#    match both data sources on them,
#    aggregate if possible
#   )
isos <- data_frame()
countries <- sort(unique(c(erd$ctr, isor$ctr)))
for (i in seq_along(countries) ) {
ctri <- countries[i]
df1 <-
isor  %>%
filter(ctr==ctri) %>%
select(so_id, so_start, so_end) %>%
as.data.frame()
df2 <-
erd  %>%
filter(ctr==ctri) %>%
select(cab_id, cab_in, cab_out) %>%
as.data.frame()
isos_tmp         <- merger_for_time_spans(df1, df2) %>% arrange(span_start, so_id, cab_id)
isos_tmp$ctr     <- ctri
isos_tmp$span_id <- isos_tmp$span_id + which(sort(unique(c(erd$ctr, isor$ctr))) %in% ctri) * 10000
isos             <- rbind(isos, isos_tmp )
}
isos
isos %>% head
#### adding dates of erd and isom to isos
isos <-
isos  %>%
left_join(isor[, c("so_start", "so_end", "so_id")]) %>%
left_join(erd[, c("cab_in", "cab_out", "cab_id")])
isos
classes(isos)
isor[, c("so_start", "so_end", "so_id")]
isos  %>%
left_join(isor[, c("so_start", "so_end", "so_id")])
erd[, c("cab_in", "cab_out", "cab_id")]
isos
isos <- as_data_frame(isos)
isos
isos  %>%
left_join(isor[, c("so_start", "so_end", "so_id")]) %>%
mutate(
span_id = as.integer(span_id),
cab_id = as.integer(cab_id)
) %>%
left_join(erd[, c("cab_in", "cab_out", "cab_id")])
isos  %>%
left_join(isor[, c("so_start", "so_end", "so_id")]) %>%
mutate(
cab_id = as.integer(cab_id)
)
as.integer(NA)
as.integer("NA")
as.integer(character(NA))
as.integer(character(1))
tab(isos$cab_id)
i
i<-3
i<-2
ctri <- countries[i]
df1 <-
isor  %>%
filter(ctr==ctri) %>%
select(so_id, so_start, so_end) %>%
as.data.frame()
df2 <-
erd  %>%
filter(ctr==ctri) %>%
select(cab_id, cab_in, cab_out) %>%
as.data.frame()
isos_tmp         <- merger_for_time_spans(df1, df2) %>% arrange(span_start, so_id, cab_id)
isos_tmp
i<-3
ctri <- countries[i]
df1 <-
isor  %>%
filter(ctr==ctri) %>%
select(so_id, so_start, so_end) %>%
as.data.frame()
df2 <-
erd  %>%
filter(ctr==ctri) %>%
select(cab_id, cab_in, cab_out) %>%
as.data.frame()
isos_tmp         <- merger_for_time_spans(df1, df2) %>% arrange(span_start, so_id, cab_id)
isos_tmp
i<-4
ctri <- countries[i]
df1 <-
isor  %>%
filter(ctr==ctri) %>%
select(so_id, so_start, so_end) %>%
as.data.frame()
df2 <-
erd  %>%
filter(ctr==ctri) %>%
select(cab_id, cab_in, cab_out) %>%
as.data.frame()
isos_tmp         <- merger_for_time_spans(df1, df2) %>% arrange(span_start, so_id, cab_id)
isos_tmp
df1
df2
isos_tmp
# initialize dataframe for storage
# column 1: date; column 2: id
df_fds <-
data.frame(
as.Date(NA),
vector(mode=class(df[[1]]), length=1),
stringsAsFactors = FALSE
)
df_fds
# input check
stopifnot( dim(df1)[2] >=3 )
stopifnot( dim(df2)[2] >=3 )
stopifnot( all(class(df1) =="data.frame") )
stopifnot( all(class(df2) =="data.frame") )
stopifnot( lapply(df1[,2:3], class) %in% "Date")
stopifnot( lapply(df2[,2:3], class) %in% "Date")
# expand min and max date from spans to sequence of dates over whole range
dmax <- max(c(df1[[2]], df1[[3]], df2[[2]], df2[[3]]), na.rm=TRUE)
dmin <- min(c(df1[[2]], df1[[3]], df2[[2]], df2[[3]]), na.rm=TRUE)
full_day_sequence  <- seq(dmin, dmax, "day")
# matching ids from span data sets and whole range of days
df_fds1 <- mfts_match_dates_to_id(full_day_sequence, df1)
df_fds2 <- mfts_match_dates_to_id(full_day_sequence, df2)
df_fds1
df_fds2
df <-
data_frame(date=full_day_sequence) %>%
left_join(df_fds1) %>%
left_join(df_fds2) %>%
arrange(date) %>%
filter(!is.na(date))
df
df_aggregated <-
data.frame(
aggregate(df[,"date"], by=list(id1=df[[2]], id2=df[[3]]), min),
end= aggregate(df[,"date"], by=list(id1=df[[2]], id2=df[[3]]), max)$date
)
df_aggregated
names(df_aggregated)[1] <- names(df1)[1]
names(df_aggregated)[2] <- names(df2)[1]
names(df_aggregated)[3] <- "start"
df_aggregated
names(df_aggregated)[3] <- "date"
names(df_aggregated)
df_aggregated
aggregate(df[,"date"], by=list(id1=df[[2]], id2=df[[3]]), min)
end= aggregate(df[,"date"], by=list(id1=df[[2]], id2=df[[3]]), max)$date
end
aggregate(df[,"date"], by=list(id1=df[[2]], id2=df[[3]]), max)$date
df_aggregated <-
data.frame(
aggregate(df[,"date"], by=list(id1=df[[2]], id2=df[[3]]), min),
end= aggregate(df[,"date"], by=list(id1=df[[2]], id2=df[[3]]), max)$date
)
names(df_aggregated)[1] <- names(df1)[1]
names(df_aggregated)[2] <- names(df2)[1]
names(df_aggregated)[3] <- "start"
names(df_aggregated)[4] <- "end"
df_aggregated
dim2(df_aggregated)<4
if ( dim2(df_aggregated)<4 ){
df_aggregated[[4]] <- NA
}
df_aggregated[[4]]
df_aggregated
df_aggregated[,4]  <- NA
df_aggregated[,4]
cbind(df_aggregated , NA)
df_aggregated
df_aggregated[[4]] <- rep(NA, dim1(df_aggregated) )
df_aggregated
names(df_aggregated)[1] <- names(df1)[1]
names(df_aggregated)[2] <- names(df2)[1]
names(df_aggregated)[3] <- "start"
names(df_aggregated)[4] <- "end"
names(df_aggregated)
df_aggregated$span_id <- seq_dim1(df_aggregated)
df_aggregated
df_nas <- df[is.na(df[[2]]) | is.na(df[[3]]), ]
df_nas
