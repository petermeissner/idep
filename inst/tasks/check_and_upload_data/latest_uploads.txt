


*AUT.rout*



R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # script for checking link data and uploading it to server
> 
> #### setting things up =========================================================
> library(idep)
> library(dplyr)
> library(RMySQL)
> '%.%' <- function(a,b) paste0(a,b)
> 
> 
> # connection function
> get_ready <- function(){
+   lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
+   source("~/DBConnections/so_local.r")
+   #source("~/DBConnections/so_latin1_local.r")
+   #source("~/DBConnections/DBSOconnection.r")
+ }
> 
> # 
> setwd("Z:/Gesch\u00e4ftsordnungen/database/rawdata")
> countries <- list.dirs(".", FALSE, FALSE)
> countries
 [1] "AUT"      "BEL"      "DEN"      "ESP"      "FRA"      "GER"     
 [7] "IRE"      "ITA"      "LUX"      "NED"      "NOR"      "POR"     
[13] "SWE"      "SWIGRN"   "SWIPARLG" "UK"      
> 
> 
> # commandline argument evaluation
> eval_cl_args()
[1] "C:\\PROGRA~1\\R\\R-32~1.1/bin/x64/Rterm.exe"
[2] "--vanilla"                                  
[3] "--args"                                     
[4] "ctr='AUT'"                                  
[5] "SHORTDESC=''"                               
+   filter( (tl_relevant==1 & tl_corpus_code==999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_one_infos <- rbind(type_one_fw, type_one_bw)
> type_one_infos <- type_one_infos[order(type_one_infos$tl_id, type_one_infos$ll_tl_id1),]
> 
> for ( i in seqalong(type_one) ){
+   if ( type_one$tl_id[i] %in% type_one_infos$tl_id ) {
+     data_lines[data_lines$tl_id == type_one$tl_id[i], ]$tl_relevant <- 0 
+     data_linkage <- data_linkage[ !(data_linkage$ll_tl_id1 == type_one$tl_id[i] | data_linkage$ll_tl_id2 == type_one$tl_id[i]), ] 
+   }
+ }
> 
> 
> # corpus code != 999 but relevant = 0
> data_linkage1 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id1)
> 
> data_linkage2 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id2)
> 
> type_two <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, tl_text)
> 
> type_two_fw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage1, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_bw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_infos <- rbind(type_two_fw, type_two_bw)
> type_two_infos <- type_two_infos[order(type_two_infos$tl_id, type_two_infos$ll_tl_id1),]
> 
> write.csv(type_two, paste0(ctr,".csv"))
> write.csv(type_two_infos, paste0(ctr,"_infos.csv"))
> 
> q(save="no")



*BEL.rout*



R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # script for checking link data and uploading it to server
> 
> #### setting things up =========================================================
> library(idep)
> library(dplyr)
> library(RMySQL)
> '%.%' <- function(a,b) paste0(a,b)
> 
> 
> # connection function
> get_ready <- function(){
+   lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
+   source("~/DBConnections/so_local.r")
+   #source("~/DBConnections/so_latin1_local.r")
+   #source("~/DBConnections/DBSOconnection.r")
+ }
> 
> # 
> setwd("Z:/Gesch\u00e4ftsordnungen/database/rawdata")
> countries <- list.dirs(".", FALSE, FALSE)
> countries
 [1] "AUT"      "BEL"      "DEN"      "ESP"      "FRA"      "GER"     
 [7] "IRE"      "ITA"      "LUX"      "NED"      "NOR"      "POR"     
[13] "SWE"      "SWIGRN"   "SWIPARLG" "UK"      
> 
> 
> # commandline argument evaluation
> eval_cl_args()
[1] "C:\\PROGRA~1\\R\\R-32~1.1/bin/x64/Rterm.exe"
[2] "--vanilla"                                  
[3] "--args"                                     
[4] "ctr='BEL'"                                  
[5] "SHORTDESC=''"                               
+   filter( (tl_relevant==1 & tl_corpus_code==999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_one_infos <- rbind(type_one_fw, type_one_bw)
> type_one_infos <- type_one_infos[order(type_one_infos$tl_id, type_one_infos$ll_tl_id1),]
> 
> for ( i in seqalong(type_one) ){
+   if ( type_one$tl_id[i] %in% type_one_infos$tl_id ) {
+     data_lines[data_lines$tl_id == type_one$tl_id[i], ]$tl_relevant <- 0 
+     data_linkage <- data_linkage[ !(data_linkage$ll_tl_id1 == type_one$tl_id[i] | data_linkage$ll_tl_id2 == type_one$tl_id[i]), ] 
+   }
+ }
> 
> 
> # corpus code != 999 but relevant = 0
> data_linkage1 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id1)
> 
> data_linkage2 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id2)
> 
> type_two <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, tl_text)
> 
> type_two_fw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage1, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_bw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_infos <- rbind(type_two_fw, type_two_bw)
> type_two_infos <- type_two_infos[order(type_two_infos$tl_id, type_two_infos$ll_tl_id1),]
> 
> write.csv(type_two, paste0(ctr,".csv"))
> write.csv(type_two_infos, paste0(ctr,"_infos.csv"))
> 
> q(save="no")



*DEN.rout*



R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # script for checking link data and uploading it to server
> 
> #### setting things up =========================================================
> library(idep)
> library(dplyr)
> library(RMySQL)
> '%.%' <- function(a,b) paste0(a,b)
> 
> 
> # connection function
> get_ready <- function(){
+   lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
+   source("~/DBConnections/so_local.r")
+   #source("~/DBConnections/so_latin1_local.r")
+   #source("~/DBConnections/DBSOconnection.r")
+ }
> 
> # 
> setwd("Z:/Gesch\u00e4ftsordnungen/database/rawdata")
> countries <- list.dirs(".", FALSE, FALSE)
> countries
 [1] "AUT"      "BEL"      "DEN"      "ESP"      "FRA"      "GER"     
 [7] "IRE"      "ITA"      "LUX"      "NED"      "NOR"      "POR"     
[13] "SWE"      "SWIGRN"   "SWIPARLG" "UK"      
> 
> 
> # commandline argument evaluation
> eval_cl_args()
[1] "C:\\PROGRA~1\\R\\R-32~1.1/bin/x64/Rterm.exe"
[2] "--vanilla"                                  
[3] "--args"                                     
[4] "ctr='DEN'"                                  
[5] "SHORTDESC=''"                               
+   filter( (tl_relevant==1 & tl_corpus_code==999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_one_infos <- rbind(type_one_fw, type_one_bw)
> type_one_infos <- type_one_infos[order(type_one_infos$tl_id, type_one_infos$ll_tl_id1),]
> 
> for ( i in seqalong(type_one) ){
+   if ( type_one$tl_id[i] %in% type_one_infos$tl_id ) {
+     data_lines[data_lines$tl_id == type_one$tl_id[i], ]$tl_relevant <- 0 
+     data_linkage <- data_linkage[ !(data_linkage$ll_tl_id1 == type_one$tl_id[i] | data_linkage$ll_tl_id2 == type_one$tl_id[i]), ] 
+   }
+ }
> 
> 
> # corpus code != 999 but relevant = 0
> data_linkage1 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id1)
> 
> data_linkage2 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id2)
> 
> type_two <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, tl_text)
> 
> type_two_fw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage1, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_bw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_infos <- rbind(type_two_fw, type_two_bw)
> type_two_infos <- type_two_infos[order(type_two_infos$tl_id, type_two_infos$ll_tl_id1),]
> 
> write.csv(type_two, paste0(ctr,".csv"))
> write.csv(type_two_infos, paste0(ctr,"_infos.csv"))
> 
> q(save="no")



*ESP.rout*



R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # script for checking link data and uploading it to server
> 
> #### setting things up =========================================================
> library(idep)
> library(dplyr)
> library(RMySQL)
> '%.%' <- function(a,b) paste0(a,b)
> 
> 
> # connection function
> get_ready <- function(){
+   lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
+   source("~/DBConnections/so_local.r")
+   #source("~/DBConnections/so_latin1_local.r")
+   #source("~/DBConnections/DBSOconnection.r")
+ }
> 
> # 
> setwd("Z:/Gesch\u00e4ftsordnungen/database/rawdata")
> countries <- list.dirs(".", FALSE, FALSE)
> countries
 [1] "AUT"      "BEL"      "DEN"      "ESP"      "FRA"      "GER"     
 [7] "IRE"      "ITA"      "LUX"      "NED"      "NOR"      "POR"     
[13] "SWE"      "SWIGRN"   "SWIPARLG" "UK"      
> 
> 
> # commandline argument evaluation
> eval_cl_args()
[1] "C:\\PROGRA~1\\R\\R-32~1.1/bin/x64/Rterm.exe"
[2] "--vanilla"                                  
[3] "--args"                                     
[4] "ctr='ESP'"                                  
[5] "SHORTDESC=''"                               
+   filter( (tl_relevant==1 & tl_corpus_code==999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_one_infos <- rbind(type_one_fw, type_one_bw)
> type_one_infos <- type_one_infos[order(type_one_infos$tl_id, type_one_infos$ll_tl_id1),]
> 
> for ( i in seqalong(type_one) ){
+   if ( type_one$tl_id[i] %in% type_one_infos$tl_id ) {
+     data_lines[data_lines$tl_id == type_one$tl_id[i], ]$tl_relevant <- 0 
+     data_linkage <- data_linkage[ !(data_linkage$ll_tl_id1 == type_one$tl_id[i] | data_linkage$ll_tl_id2 == type_one$tl_id[i]), ] 
+   }
+ }
> 
> 
> # corpus code != 999 but relevant = 0
> data_linkage1 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id1)
> 
> data_linkage2 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id2)
> 
> type_two <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, tl_text)
> 
> type_two_fw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage1, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_bw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_infos <- rbind(type_two_fw, type_two_bw)
> type_two_infos <- type_two_infos[order(type_two_infos$tl_id, type_two_infos$ll_tl_id1),]
> 
> write.csv(type_two, paste0(ctr,".csv"))
> write.csv(type_two_infos, paste0(ctr,"_infos.csv"))
> 
> q(save="no")



*FRA.rout*



R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # script for checking link data and uploading it to server
> 
> #### setting things up =========================================================
> library(idep)
> library(dplyr)
> library(RMySQL)
> '%.%' <- function(a,b) paste0(a,b)
> 
> 
> # connection function
> get_ready <- function(){
+   lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
+   source("~/DBConnections/so_local.r")
+   #source("~/DBConnections/so_latin1_local.r")
+   #source("~/DBConnections/DBSOconnection.r")
+ }
> 
> # 
> setwd("Z:/Gesch\u00e4ftsordnungen/database/rawdata")
> countries <- list.dirs(".", FALSE, FALSE)
> countries
 [1] "AUT"      "BEL"      "DEN"      "ESP"      "FRA"      "GER"     
 [7] "IRE"      "ITA"      "LUX"      "NED"      "NOR"      "POR"     
[13] "SWE"      "SWIGRN"   "SWIPARLG" "UK"      
> 
> 
> # commandline argument evaluation
> eval_cl_args()
[1] "C:\\PROGRA~1\\R\\R-32~1.1/bin/x64/Rterm.exe"
[2] "--vanilla"                                  
[3] "--args"                                     
[4] "ctr='FRA'"                                  
[5] "SHORTDESC=''"                               
+   filter( (tl_relevant==1 & tl_corpus_code==999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_one_infos <- rbind(type_one_fw, type_one_bw)
> type_one_infos <- type_one_infos[order(type_one_infos$tl_id, type_one_infos$ll_tl_id1),]
> 
> for ( i in seqalong(type_one) ){
+   if ( type_one$tl_id[i] %in% type_one_infos$tl_id ) {
+     data_lines[data_lines$tl_id == type_one$tl_id[i], ]$tl_relevant <- 0 
+     data_linkage <- data_linkage[ !(data_linkage$ll_tl_id1 == type_one$tl_id[i] | data_linkage$ll_tl_id2 == type_one$tl_id[i]), ] 
+   }
+ }
> 
> 
> # corpus code != 999 but relevant = 0
> data_linkage1 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id1)
> 
> data_linkage2 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id2)
> 
> type_two <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, tl_text)
> 
> type_two_fw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage1, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_bw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_infos <- rbind(type_two_fw, type_two_bw)
> type_two_infos <- type_two_infos[order(type_two_infos$tl_id, type_two_infos$ll_tl_id1),]
> 
> write.csv(type_two, paste0(ctr,".csv"))
> write.csv(type_two_infos, paste0(ctr,"_infos.csv"))
> 
> q(save="no")



*GER.rout*



R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # script for checking link data and uploading it to server
> 
> #### setting things up =========================================================
> library(idep)
> library(dplyr)
> library(RMySQL)
> '%.%' <- function(a,b) paste0(a,b)
> 
> 
> # connection function
> get_ready <- function(){
+   lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
+   source("~/DBConnections/so_local.r")
+   #source("~/DBConnections/so_latin1_local.r")
+   #source("~/DBConnections/DBSOconnection.r")
+ }
> 
> # 
> setwd("Z:/Gesch\u00e4ftsordnungen/database/rawdata")
> countries <- list.dirs(".", FALSE, FALSE)
> countries
 [1] "AUT"      "BEL"      "DEN"      "ESP"      "FRA"      "GER"     
 [7] "IRE"      "ITA"      "LUX"      "NED"      "NOR"      "POR"     
[13] "SWE"      "SWIGRN"   "SWIPARLG" "UK"      
> 
> 
> # commandline argument evaluation
> eval_cl_args()
[1] "C:\\PROGRA~1\\R\\R-32~1.1/bin/x64/Rterm.exe"
[2] "--vanilla"                                  
[3] "--args"                                     
[4] "ctr='GER'"                                  
[5] "SHORTDESC=''"                               
+   filter( (tl_relevant==1 & tl_corpus_code==999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_one_infos <- rbind(type_one_fw, type_one_bw)
> type_one_infos <- type_one_infos[order(type_one_infos$tl_id, type_one_infos$ll_tl_id1),]
> 
> for ( i in seqalong(type_one) ){
+   if ( type_one$tl_id[i] %in% type_one_infos$tl_id ) {
+     data_lines[data_lines$tl_id == type_one$tl_id[i], ]$tl_relevant <- 0 
+     data_linkage <- data_linkage[ !(data_linkage$ll_tl_id1 == type_one$tl_id[i] | data_linkage$ll_tl_id2 == type_one$tl_id[i]), ] 
+   }
+ }
> 
> 
> # corpus code != 999 but relevant = 0
> data_linkage1 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id1)
> 
> data_linkage2 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id2)
> 
> type_two <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, tl_text)
> 
> type_two_fw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage1, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_bw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_infos <- rbind(type_two_fw, type_two_bw)
> type_two_infos <- type_two_infos[order(type_two_infos$tl_id, type_two_infos$ll_tl_id1),]
> 
> write.csv(type_two, paste0(ctr,".csv"))
> write.csv(type_two_infos, paste0(ctr,"_infos.csv"))
> 
> q(save="no")



*IRE.rout*



R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # script for checking link data and uploading it to server
> 
> #### setting things up =========================================================
> library(idep)
> library(dplyr)
> library(RMySQL)
> '%.%' <- function(a,b) paste0(a,b)
> 
> 
> # connection function
> get_ready <- function(){
+   lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
+   source("~/DBConnections/so_local.r")
+   #source("~/DBConnections/so_latin1_local.r")
+   #source("~/DBConnections/DBSOconnection.r")
+ }
> 
> # 
> setwd("Z:/Gesch\u00e4ftsordnungen/database/rawdata")
> countries <- list.dirs(".", FALSE, FALSE)
> countries
 [1] "AUT"      "BEL"      "DEN"      "ESP"      "FRA"      "GER"     
 [7] "IRE"      "ITA"      "LUX"      "NED"      "NOR"      "POR"     
[13] "SWE"      "SWIGRN"   "SWIPARLG" "UK"      
> 
> 
> # commandline argument evaluation
> eval_cl_args()
[1] "C:\\PROGRA~1\\R\\R-32~1.1/bin/x64/Rterm.exe"
[2] "--vanilla"                                  
[3] "--args"                                     
[4] "ctr='IRE'"                                  
[5] "SHORTDESC=''"                               
+   filter( (tl_relevant==1 & tl_corpus_code==999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_one_infos <- rbind(type_one_fw, type_one_bw)
> type_one_infos <- type_one_infos[order(type_one_infos$tl_id, type_one_infos$ll_tl_id1),]
> 
> for ( i in seqalong(type_one) ){
+   if ( type_one$tl_id[i] %in% type_one_infos$tl_id ) {
+     data_lines[data_lines$tl_id == type_one$tl_id[i], ]$tl_relevant <- 0 
+     data_linkage <- data_linkage[ !(data_linkage$ll_tl_id1 == type_one$tl_id[i] | data_linkage$ll_tl_id2 == type_one$tl_id[i]), ] 
+   }
+ }
> 
> 
> # corpus code != 999 but relevant = 0
> data_linkage1 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id1)
> 
> data_linkage2 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id2)
> 
> type_two <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, tl_text)
> 
> type_two_fw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage1, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_bw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_infos <- rbind(type_two_fw, type_two_bw)
> type_two_infos <- type_two_infos[order(type_two_infos$tl_id, type_two_infos$ll_tl_id1),]
> 
> write.csv(type_two, paste0(ctr,".csv"))
> write.csv(type_two_infos, paste0(ctr,"_infos.csv"))
> 
> q(save="no")



*ITA.rout*



R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # script for checking link data and uploading it to server
> 
> #### setting things up =========================================================
> library(idep)
> library(dplyr)
> library(RMySQL)
> '%.%' <- function(a,b) paste0(a,b)
> 
> 
> # connection function
> get_ready <- function(){
+   lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
+   source("~/DBConnections/so_local.r")
+   #source("~/DBConnections/so_latin1_local.r")
+   #source("~/DBConnections/DBSOconnection.r")
+ }
> 
> # 
> setwd("Z:/Gesch\u00e4ftsordnungen/database/rawdata")
> countries <- list.dirs(".", FALSE, FALSE)
> countries
 [1] "AUT"      "BEL"      "DEN"      "ESP"      "FRA"      "GER"     
 [7] "IRE"      "ITA"      "LUX"      "NED"      "NOR"      "POR"     
[13] "SWE"      "SWIGRN"   "SWIPARLG" "UK"      
> 
> 
> # commandline argument evaluation
> eval_cl_args()
[1] "C:\\PROGRA~1\\R\\R-32~1.1/bin/x64/Rterm.exe"
[2] "--vanilla"                                  
[3] "--args"                                     
[4] "ctr='ITA'"                                  
[5] "SHORTDESC=''"                               
+   filter( (tl_relevant==1 & tl_corpus_code==999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_one_infos <- rbind(type_one_fw, type_one_bw)
> type_one_infos <- type_one_infos[order(type_one_infos$tl_id, type_one_infos$ll_tl_id1),]
> 
> for ( i in seqalong(type_one) ){
+   if ( type_one$tl_id[i] %in% type_one_infos$tl_id ) {
+     data_lines[data_lines$tl_id == type_one$tl_id[i], ]$tl_relevant <- 0 
+     data_linkage <- data_linkage[ !(data_linkage$ll_tl_id1 == type_one$tl_id[i] | data_linkage$ll_tl_id2 == type_one$tl_id[i]), ] 
+   }
+ }
> 
> 
> # corpus code != 999 but relevant = 0
> data_linkage1 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id1)
> 
> data_linkage2 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id2)
> 
> type_two <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, tl_text)
> 
> type_two_fw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage1, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_bw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_infos <- rbind(type_two_fw, type_two_bw)
> type_two_infos <- type_two_infos[order(type_two_infos$tl_id, type_two_infos$ll_tl_id1),]
> 
> write.csv(type_two, paste0(ctr,".csv"))
> write.csv(type_two_infos, paste0(ctr,"_infos.csv"))
> 
> q(save="no")



*latest_uploads.rout*



R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

>  routs <- list.files(pattern=".*rout")
>  message <- character(0)
>  for ( i in seq_along(routs) ) 
+  {
+     text <- readLines(routs[i])
+     text <-  grep("^\\s*\\|", text, invert=T, value=T)
+     message <- 
+       c(
+         message, 
+         paste0("\n\n\n*",routs[i],"*\n\n"),
+         head(text, 50), 
+         tail(text, 50)
+       )
+  }

R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

>  routs <- list.files(pattern=".*rout")
>  message <- character(0)
>  for ( i in seq_along(routs) ) 
+  {
+     text <- readLines(routs[i])
+     text <-  grep("^\\s*\\|", text, invert=T, value=T)
+     message <- 
+       c(
+         message, 
+         paste0("\n\n\n*",routs[i],"*\n\n"),
+         head(text, 50), 
+         tail(text, 50)
+       )
+  }



*LUX.rout*



R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # script for checking link data and uploading it to server
> 
> #### setting things up =========================================================
> library(idep)
> library(dplyr)
> library(RMySQL)
> '%.%' <- function(a,b) paste0(a,b)
> 
> 
> # connection function
> get_ready <- function(){
+   lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
+   source("~/DBConnections/so_local.r")
+   #source("~/DBConnections/so_latin1_local.r")
+   #source("~/DBConnections/DBSOconnection.r")
+ }
> 
> # 
> setwd("Z:/Gesch\u00e4ftsordnungen/database/rawdata")
> countries <- list.dirs(".", FALSE, FALSE)
> countries
 [1] "AUT"      "BEL"      "DEN"      "ESP"      "FRA"      "GER"     
 [7] "IRE"      "ITA"      "LUX"      "NED"      "NOR"      "POR"     
[13] "SWE"      "SWIGRN"   "SWIPARLG" "UK"      
> 
> 
> # commandline argument evaluation
> eval_cl_args()
[1] "C:\\PROGRA~1\\R\\R-32~1.1/bin/x64/Rterm.exe"
[2] "--vanilla"                                  
[3] "--args"                                     
[4] "ctr='LUX'"                                  
[5] "SHORTDESC=''"                               
+   filter( (tl_relevant==1 & tl_corpus_code==999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_one_infos <- rbind(type_one_fw, type_one_bw)
> type_one_infos <- type_one_infos[order(type_one_infos$tl_id, type_one_infos$ll_tl_id1),]
> 
> for ( i in seqalong(type_one) ){
+   if ( type_one$tl_id[i] %in% type_one_infos$tl_id ) {
+     data_lines[data_lines$tl_id == type_one$tl_id[i], ]$tl_relevant <- 0 
+     data_linkage <- data_linkage[ !(data_linkage$ll_tl_id1 == type_one$tl_id[i] | data_linkage$ll_tl_id2 == type_one$tl_id[i]), ] 
+   }
+ }
> 
> 
> # corpus code != 999 but relevant = 0
> data_linkage1 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id1)
> 
> data_linkage2 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id2)
> 
> type_two <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, tl_text)
> 
> type_two_fw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage1, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_bw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_infos <- rbind(type_two_fw, type_two_bw)
> type_two_infos <- type_two_infos[order(type_two_infos$tl_id, type_two_infos$ll_tl_id1),]
> 
> write.csv(type_two, paste0(ctr,".csv"))
> write.csv(type_two_infos, paste0(ctr,"_infos.csv"))
> 
> q(save="no")



*NED.rout*



R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # script for checking link data and uploading it to server
> 
> #### setting things up =========================================================
> library(idep)
> library(dplyr)
> library(RMySQL)
> '%.%' <- function(a,b) paste0(a,b)
> 
> 
> # connection function
> get_ready <- function(){
+   lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
+   source("~/DBConnections/so_local.r")
+   #source("~/DBConnections/so_latin1_local.r")
+   #source("~/DBConnections/DBSOconnection.r")
+ }
> 
> # 
> setwd("Z:/Gesch\u00e4ftsordnungen/database/rawdata")
> countries <- list.dirs(".", FALSE, FALSE)
> countries
 [1] "AUT"      "BEL"      "DEN"      "ESP"      "FRA"      "GER"     
 [7] "IRE"      "ITA"      "LUX"      "NED"      "NOR"      "POR"     
[13] "SWE"      "SWIGRN"   "SWIPARLG" "UK"      
> 
> 
> # commandline argument evaluation
> eval_cl_args()
[1] "C:\\PROGRA~1\\R\\R-32~1.1/bin/x64/Rterm.exe"
[2] "--vanilla"                                  
[3] "--args"                                     
[4] "ctr='NED'"                                  
[5] "SHORTDESC=''"                               
+   filter( (tl_relevant==1 & tl_corpus_code==999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_one_infos <- rbind(type_one_fw, type_one_bw)
> type_one_infos <- type_one_infos[order(type_one_infos$tl_id, type_one_infos$ll_tl_id1),]
> 
> for ( i in seqalong(type_one) ){
+   if ( type_one$tl_id[i] %in% type_one_infos$tl_id ) {
+     data_lines[data_lines$tl_id == type_one$tl_id[i], ]$tl_relevant <- 0 
+     data_linkage <- data_linkage[ !(data_linkage$ll_tl_id1 == type_one$tl_id[i] | data_linkage$ll_tl_id2 == type_one$tl_id[i]), ] 
+   }
+ }
> 
> 
> # corpus code != 999 but relevant = 0
> data_linkage1 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id1)
> 
> data_linkage2 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id2)
> 
> type_two <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, tl_text)
> 
> type_two_fw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage1, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_bw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_infos <- rbind(type_two_fw, type_two_bw)
> type_two_infos <- type_two_infos[order(type_two_infos$tl_id, type_two_infos$ll_tl_id1),]
> 
> write.csv(type_two, paste0(ctr,".csv"))
> write.csv(type_two_infos, paste0(ctr,"_infos.csv"))
> 
> q(save="no")



*NOR.rout*



R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # script for checking link data and uploading it to server
> 
> #### setting things up =========================================================
> library(idep)
> library(dplyr)
> library(RMySQL)
> '%.%' <- function(a,b) paste0(a,b)
> 
> 
> # connection function
> get_ready <- function(){
+   lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
+   source("~/DBConnections/so_local.r")
+   #source("~/DBConnections/so_latin1_local.r")
+   #source("~/DBConnections/DBSOconnection.r")
+ }
> 
> # 
> setwd("Z:/Gesch\u00e4ftsordnungen/database/rawdata")
> countries <- list.dirs(".", FALSE, FALSE)
> countries
 [1] "AUT"      "BEL"      "DEN"      "ESP"      "FRA"      "GER"     
 [7] "IRE"      "ITA"      "LUX"      "NED"      "NOR"      "POR"     
[13] "SWE"      "SWIGRN"   "SWIPARLG" "UK"      
> 
> 
> # commandline argument evaluation
> eval_cl_args()
[1] "C:\\PROGRA~1\\R\\R-32~1.1/bin/x64/Rterm.exe"
[2] "--vanilla"                                  
[3] "--args"                                     
[4] "ctr='NOR'"                                  
[5] "SHORTDESC=''"                               
+   filter( (tl_relevant==1 & tl_corpus_code==999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_one_infos <- rbind(type_one_fw, type_one_bw)
> type_one_infos <- type_one_infos[order(type_one_infos$tl_id, type_one_infos$ll_tl_id1),]
> 
> for ( i in seqalong(type_one) ){
+   if ( type_one$tl_id[i] %in% type_one_infos$tl_id ) {
+     data_lines[data_lines$tl_id == type_one$tl_id[i], ]$tl_relevant <- 0 
+     data_linkage <- data_linkage[ !(data_linkage$ll_tl_id1 == type_one$tl_id[i] | data_linkage$ll_tl_id2 == type_one$tl_id[i]), ] 
+   }
+ }
> 
> 
> # corpus code != 999 but relevant = 0
> data_linkage1 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id1)
> 
> data_linkage2 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id2)
> 
> type_two <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, tl_text)
> 
> type_two_fw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage1, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_bw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_infos <- rbind(type_two_fw, type_two_bw)
> type_two_infos <- type_two_infos[order(type_two_infos$tl_id, type_two_infos$ll_tl_id1),]
> 
> write.csv(type_two, paste0(ctr,".csv"))
> write.csv(type_two_infos, paste0(ctr,"_infos.csv"))
> 
> q(save="no")



*POR.rout*



R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # script for checking link data and uploading it to server
> 
> #### setting things up =========================================================
> library(idep)
> library(dplyr)
> library(RMySQL)
> '%.%' <- function(a,b) paste0(a,b)
> 
> 
> # connection function
> get_ready <- function(){
+   lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
+   source("~/DBConnections/so_local.r")
+   #source("~/DBConnections/so_latin1_local.r")
+   #source("~/DBConnections/DBSOconnection.r")
+ }
> 
> # 
> setwd("Z:/Gesch\u00e4ftsordnungen/database/rawdata")
> countries <- list.dirs(".", FALSE, FALSE)
> countries
 [1] "AUT"      "BEL"      "DEN"      "ESP"      "FRA"      "GER"     
 [7] "IRE"      "ITA"      "LUX"      "NED"      "NOR"      "POR"     
[13] "SWE"      "SWIGRN"   "SWIPARLG" "UK"      
> 
> 
> # commandline argument evaluation
> eval_cl_args()
[1] "C:\\PROGRA~1\\R\\R-32~1.1/bin/x64/Rterm.exe"
[2] "--vanilla"                                  
[3] "--args"                                     
[4] "ctr='POR'"                                  
[5] "SHORTDESC=''"                               
+   filter( (tl_relevant==1 & tl_corpus_code==999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_one_infos <- rbind(type_one_fw, type_one_bw)
> type_one_infos <- type_one_infos[order(type_one_infos$tl_id, type_one_infos$ll_tl_id1),]
> 
> for ( i in seqalong(type_one) ){
+   if ( type_one$tl_id[i] %in% type_one_infos$tl_id ) {
+     data_lines[data_lines$tl_id == type_one$tl_id[i], ]$tl_relevant <- 0 
+     data_linkage <- data_linkage[ !(data_linkage$ll_tl_id1 == type_one$tl_id[i] | data_linkage$ll_tl_id2 == type_one$tl_id[i]), ] 
+   }
+ }
> 
> 
> # corpus code != 999 but relevant = 0
> data_linkage1 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id1)
> 
> data_linkage2 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id2)
> 
> type_two <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, tl_text)
> 
> type_two_fw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage1, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_bw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_infos <- rbind(type_two_fw, type_two_bw)
> type_two_infos <- type_two_infos[order(type_two_infos$tl_id, type_two_infos$ll_tl_id1),]
> 
> write.csv(type_two, paste0(ctr,".csv"))
> write.csv(type_two_infos, paste0(ctr,"_infos.csv"))
> 
> q(save="no")



*SWE.rout*



R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # script for checking link data and uploading it to server
> 
> #### setting things up =========================================================
> library(idep)
> library(dplyr)
> library(RMySQL)
> '%.%' <- function(a,b) paste0(a,b)
> 
> 
> # connection function
> get_ready <- function(){
+   lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
+   source("~/DBConnections/so_local.r")
+   #source("~/DBConnections/so_latin1_local.r")
+   #source("~/DBConnections/DBSOconnection.r")
+ }
> 
> # 
> setwd("Z:/Gesch\u00e4ftsordnungen/database/rawdata")
> countries <- list.dirs(".", FALSE, FALSE)
> countries
 [1] "AUT"      "BEL"      "DEN"      "ESP"      "FRA"      "GER"     
 [7] "IRE"      "ITA"      "LUX"      "NED"      "NOR"      "POR"     
[13] "SWE"      "SWIGRN"   "SWIPARLG" "UK"      
> 
> 
> # commandline argument evaluation
> eval_cl_args()
[1] "C:\\PROGRA~1\\R\\R-32~1.1/bin/x64/Rterm.exe"
[2] "--vanilla"                                  
[3] "--args"                                     
[4] "ctr='SWE'"                                  
[5] "SHORTDESC=''"                               
+   filter( (tl_relevant==1 & tl_corpus_code==999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_one_infos <- rbind(type_one_fw, type_one_bw)
> type_one_infos <- type_one_infos[order(type_one_infos$tl_id, type_one_infos$ll_tl_id1),]
> 
> for ( i in seqalong(type_one) ){
+   if ( type_one$tl_id[i] %in% type_one_infos$tl_id ) {
+     data_lines[data_lines$tl_id == type_one$tl_id[i], ]$tl_relevant <- 0 
+     data_linkage <- data_linkage[ !(data_linkage$ll_tl_id1 == type_one$tl_id[i] | data_linkage$ll_tl_id2 == type_one$tl_id[i]), ] 
+   }
+ }
> 
> 
> # corpus code != 999 but relevant = 0
> data_linkage1 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id1)
> 
> data_linkage2 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id2)
> 
> type_two <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, tl_text)
> 
> type_two_fw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage1, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_bw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_infos <- rbind(type_two_fw, type_two_bw)
> type_two_infos <- type_two_infos[order(type_two_infos$tl_id, type_two_infos$ll_tl_id1),]
> 
> write.csv(type_two, paste0(ctr,".csv"))
> write.csv(type_two_infos, paste0(ctr,"_infos.csv"))
> 
> q(save="no")



*SWIGRN.rout*



R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # script for checking link data and uploading it to server
> 
> #### setting things up =========================================================
> library(idep)
> library(dplyr)
> library(RMySQL)
> '%.%' <- function(a,b) paste0(a,b)
> 
> 
> # connection function
> get_ready <- function(){
+   lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
+   source("~/DBConnections/so_local.r")
+   #source("~/DBConnections/so_latin1_local.r")
+   #source("~/DBConnections/DBSOconnection.r")
+ }
> 
> # 
> setwd("Z:/Gesch\u00e4ftsordnungen/database/rawdata")
> countries <- list.dirs(".", FALSE, FALSE)
> countries
 [1] "AUT"      "BEL"      "DEN"      "ESP"      "FRA"      "GER"     
 [7] "IRE"      "ITA"      "LUX"      "NED"      "NOR"      "POR"     
[13] "SWE"      "SWIGRN"   "SWIPARLG" "UK"      
> 
> 
> # commandline argument evaluation
> eval_cl_args()
[1] "C:\\PROGRA~1\\R\\R-32~1.1/bin/x64/Rterm.exe"
[2] "--vanilla"                                  
[3] "--args"                                     
[4] "ctr='SWIGRN'"                               
[5] "SHORTDESC=''"                               
+   filter( (tl_relevant==1 & tl_corpus_code==999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_one_infos <- rbind(type_one_fw, type_one_bw)
> type_one_infos <- type_one_infos[order(type_one_infos$tl_id, type_one_infos$ll_tl_id1),]
> 
> for ( i in seqalong(type_one) ){
+   if ( type_one$tl_id[i] %in% type_one_infos$tl_id ) {
+     data_lines[data_lines$tl_id == type_one$tl_id[i], ]$tl_relevant <- 0 
+     data_linkage <- data_linkage[ !(data_linkage$ll_tl_id1 == type_one$tl_id[i] | data_linkage$ll_tl_id2 == type_one$tl_id[i]), ] 
+   }
+ }
> 
> 
> # corpus code != 999 but relevant = 0
> data_linkage1 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id1)
> 
> data_linkage2 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id2)
> 
> type_two <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, tl_text)
> 
> type_two_fw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage1, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_bw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_infos <- rbind(type_two_fw, type_two_bw)
> type_two_infos <- type_two_infos[order(type_two_infos$tl_id, type_two_infos$ll_tl_id1),]
> 
> write.csv(type_two, paste0(ctr,".csv"))
> write.csv(type_two_infos, paste0(ctr,"_infos.csv"))
> 
> q(save="no")



*SWIPARLG.rout*



R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # script for checking link data and uploading it to server
> 
> #### setting things up =========================================================
> library(idep)
> library(dplyr)
> library(RMySQL)
> '%.%' <- function(a,b) paste0(a,b)
> 
> 
> # connection function
> get_ready <- function(){
+   lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
+   source("~/DBConnections/so_local.r")
+   #source("~/DBConnections/so_latin1_local.r")
+   #source("~/DBConnections/DBSOconnection.r")
+ }
> 
> # 
> setwd("Z:/Gesch\u00e4ftsordnungen/database/rawdata")
> countries <- list.dirs(".", FALSE, FALSE)
> countries
 [1] "AUT"      "BEL"      "DEN"      "ESP"      "FRA"      "GER"     
 [7] "IRE"      "ITA"      "LUX"      "NED"      "NOR"      "POR"     
[13] "SWE"      "SWIGRN"   "SWIPARLG" "UK"      
> 
> 
> # commandline argument evaluation
> eval_cl_args()
[1] "C:\\PROGRA~1\\R\\R-32~1.1/bin/x64/Rterm.exe"
[2] "--vanilla"                                  
[3] "--args"                                     
[4] "ctr='SWIPARLG'"                             
[5] "SHORTDESC=''"                               
+   filter( (tl_relevant==1 & tl_corpus_code==999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_one_infos <- rbind(type_one_fw, type_one_bw)
> type_one_infos <- type_one_infos[order(type_one_infos$tl_id, type_one_infos$ll_tl_id1),]
> 
> for ( i in seqalong(type_one) ){
+   if ( type_one$tl_id[i] %in% type_one_infos$tl_id ) {
+     data_lines[data_lines$tl_id == type_one$tl_id[i], ]$tl_relevant <- 0 
+     data_linkage <- data_linkage[ !(data_linkage$ll_tl_id1 == type_one$tl_id[i] | data_linkage$ll_tl_id2 == type_one$tl_id[i]), ] 
+   }
+ }
> 
> 
> # corpus code != 999 but relevant = 0
> data_linkage1 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id1)
> 
> data_linkage2 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id2)
> 
> type_two <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, tl_text)
> 
> type_two_fw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage1, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_bw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_infos <- rbind(type_two_fw, type_two_bw)
> type_two_infos <- type_two_infos[order(type_two_infos$tl_id, type_two_infos$ll_tl_id1),]
> 
> write.csv(type_two, paste0(ctr,".csv"))
> write.csv(type_two_infos, paste0(ctr,"_infos.csv"))
> 
> q(save="no")



*UK.rout*



R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # script for checking link data and uploading it to server
> 
> #### setting things up =========================================================
> library(idep)
> library(dplyr)
> library(RMySQL)
> '%.%' <- function(a,b) paste0(a,b)
> 
> 
> # connection function
> get_ready <- function(){
+   lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
+   source("~/DBConnections/so_local.r")
+   #source("~/DBConnections/so_latin1_local.r")
+   #source("~/DBConnections/DBSOconnection.r")
+ }
> 
> # 
> setwd("Z:/Gesch\u00e4ftsordnungen/database/rawdata")
> countries <- list.dirs(".", FALSE, FALSE)
> countries
 [1] "AUT"      "BEL"      "DEN"      "ESP"      "FRA"      "GER"     
 [7] "IRE"      "ITA"      "LUX"      "NED"      "NOR"      "POR"     
[13] "SWE"      "SWIGRN"   "SWIPARLG" "UK"      
> 
> 
> # commandline argument evaluation
> eval_cl_args()
[1] "C:\\PROGRA~1\\R\\R-32~1.1/bin/x64/Rterm.exe"
[2] "--vanilla"                                  
[3] "--args"                                     
[4] "ctr='UK'"                                   
[5] "SHORTDESC=''"                               
+   filter( (tl_relevant==1 & tl_corpus_code==999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_one_infos <- rbind(type_one_fw, type_one_bw)
> type_one_infos <- type_one_infos[order(type_one_infos$tl_id, type_one_infos$ll_tl_id1),]
> 
> for ( i in seqalong(type_one) ){
+   if ( type_one$tl_id[i] %in% type_one_infos$tl_id ) {
+     data_lines[data_lines$tl_id == type_one$tl_id[i], ]$tl_relevant <- 0 
+     data_linkage <- data_linkage[ !(data_linkage$ll_tl_id1 == type_one$tl_id[i] | data_linkage$ll_tl_id2 == type_one$tl_id[i]), ] 
+   }
+ }
> 
> 
> # corpus code != 999 but relevant = 0
> data_linkage1 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id1)
> 
> data_linkage2 <- 
+   data_linkage %>% 
+   select(ll_tl_id1, ll_tl_id2, ll_type)  %>% 
+   mutate(tl_id = ll_tl_id2)
> 
> type_two <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, tl_text)
> 
> type_two_fw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage1, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_bw <- 
+   data_lines  %>% 
+   filter( (tl_relevant==0 & tl_corpus_code!=999) ) %>% 
+   inner_join(data_linkage2, by="tl_id") %>% 
+   select(tl_id, tl_relevant, tl_corpus_code, ll_tl_id1, ll_tl_id2, ll_type) 
> 
> type_two_infos <- rbind(type_two_fw, type_two_bw)
> type_two_infos <- type_two_infos[order(type_two_infos$tl_id, type_two_infos$ll_tl_id1),]
> 
> write.csv(type_two, paste0(ctr,".csv"))
> write.csv(type_two_infos, paste0(ctr,"_infos.csv"))
> 
> q(save="no")
